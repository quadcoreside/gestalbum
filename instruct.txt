/*

COMPILE  javac gzik\MainClass.java
COMPILE  javac gzik\Obj\Album.java

RUN      java gzik.MainClass

Votre programme doit obligatoirement présenter les différentes thématiques suivantes :
   Héritage OK
   Sérialisation --> JSON
   Gestion des exceptions --> A faire
   Les collections        --> OK à venie
   Au moins une classe abstraite sera implémentée et au moins une interface sera utilisée
   Les fichiers doivent contenir au moins : 20 éléments, 3 albums et 2 playlists

Le rapport ne devra pas comporter de code et uniquement décrire :
   Le diagramme de classe en UML.
   Les contributions de chaque étudiant.
   Le travail réalisé.
   Les difficultés rencontrées et les solutions qui leur ont été apportées.

Commande Main d'affichage:
- « lc » : les chansons d’un album

    Afficher la liste des album
    Taper N° Album
    Liste de chansons

- « ld » : les titres des albums, rangés par date de sortie

    Liste de tout le json trié par date

- « lg » : les titres des albums, rangés par genre

    Liste de tout le json trié par genre

- « lp » : les playlists, rangées par nom

    Liste de tout le json playlist trié par nom

- « ll » : les livres audio rangés par auteur

    Liste de tout le json playlist trié par auteur

Commande Main d'écriture:
- « c » : rajout d’une nouvelle chanson
- « a » : rajout d’un nouvel album
- « + » : rajout d’une chanson existante à un album
- « l » : rajout d’un nouveau livre audio
- « p » : création d’une nouvelle playlist à partir de chansons et livres audio existants
- « - » : suppression d’une playlist
- « s » : sauvegarde des playlists, des albums, des chansons et des livres audios dans les fichiers concernés.
- « h » : aide avec les détails des commandes précédentes.

Collection {
  ID index
  Name

  Album -> Titre, Artiste, Durée, date de sortie, Chanson(index)
  Playlist ->  Elementmusical(index)
}

ElementMusical {
  ID index
  Name
  Durée
  Contenu chemin du fichier
  Chanson -> Artiste, Genre(index)
  LivreAudio ->  Auteur, Langues(index), Catégorie(index)
}



TabGenre{1 = Jazz,2 = Hip-Hop,3 = Rock, 4 = Pop, 5 = Rap}

tabCat{1 = Jeunesse, 2 = Roman,3 = Théatre,4 = Discours,5 = Documetaire}

Langues{1 = Francais,2 = Anglais,3 = Italien,4 = Espagnol,5 = Allemand}


{
  "menu": {
    "id": "file",
    "value": "File",
    "popup": {
      "menuitem": [
        {"value": "New", "onclick": "CreateNewDoc()"},
        {"value": "Open", "onclick": "OpenDoc()"},
        {"value": "Close", "onclick": "CloseDoc()"}
      ]
    }
  }
}
https://jsonformatter.curiousconcept.com/#
Titre, Artiste, Durée, date de sortie, Chanson(index)
{
"Collection": {

  "album": [
    {
      "Name" : "Album 1",
      "Artiste": "Milles Davis",
      "Duree": "56",
      "DateSortie": "1959",
      chanson: [ 6, 7, 8, 9 ]
    },
    {
      "Name" : "Album 2",
      "Artiste": "Milles Davis",
      "Duree": "56",
      "DateSortie": "1959",
      chanson: [ 6, 7, 8, 9 ]
    },
    {
      "Name" : "Album 3",
      "Artiste": "Milles Davis",
      "Duree": "56",
      "DateSortie": "1959",
      chanson: [ 6, 7, 8, 9 ]
    }
  ],  "Playlist": {
    "Duree": "",
    ElementMusical: [ 1, 2, 3, 4 ],
  }
}
}



JsonObject jsonObject = new JsonParser().parse("{\"name\": \"John\"}").getAsJsonObject();
System.out.println(jsonObject.get("name").getAsString()); //John


https://stackoverflow.com/questions/2591098/how-to-parse-json-in-java
*/
